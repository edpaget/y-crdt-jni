plugins {
    id 'java-library'
    id 'checkstyle'
    id 'maven-publish'
    id 'me.champeau.jmh' version '0.7.2'
}

group = 'net.carcdr'
version = rootProject.version

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.author = true
    options.version = true
    options.links = [
        'https://docs.oracle.com/en/java/javase/21/docs/api/'
    ]
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
}

// Test configuration
test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = false
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

// Make build depend on checkstyle
tasks.named('check') {
    dependsOn 'checkstyleMain', 'checkstyleTest'
}

// Task to build the Rust library
task buildRustLibrary(type: Exec) {
    group = 'build'
    description = 'Builds the Rust native library'

    workingDir project.projectDir
    commandLine 'cargo', 'build', '--release'

    doLast {
        println "Rust library built successfully"
    }
}

// Task to copy the native library to resources
task copyNativeLibrary(type: Copy, dependsOn: buildRustLibrary) {
    group = 'build'
    description = 'Copies the native library to Java resources'

    def osName
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        osName = 'linux'
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        osName = 'macos'
    } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        osName = 'windows'
    } else {
        throw new GradleException("Unsupported OS")
    }

    def osArch = System.getProperty("os.arch").toLowerCase()
    if (osArch.contains("amd64") || osArch.contains("x86_64")) {
        osArch = 'x86_64'
    } else if (osArch.contains("aarch64") || osArch.contains("arm64")) {
        osArch = 'aarch64'
    } else {
        throw new GradleException("Unsupported architecture: " + osArch)
    }

    from("${project.projectDir}/target/release") {
        include '*.so'
        include '*.dylib'
        include '*.dll'
    }
    into "${project.buildDir}/resources/main/native/${osName}/${osArch}"

    doLast {
        println "Native library copied to resources"
    }
}

// Make processResources depend on copying the native library
processResources.dependsOn copyNativeLibrary

// Clean Rust build artifacts
task cleanRust(type: Exec) {
    group = 'build'
    description = 'Cleans Rust build artifacts'
    workingDir project.projectDir
    commandLine 'cargo', 'clean'
}

clean.dependsOn cleanRust

// Task to run Rust tests
task testRust(type: Exec) {
    group = 'verification'
    description = 'Runs Rust tests'
    workingDir project.projectDir
    commandLine 'cargo', 'test'
}

test.dependsOn testRust

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'ycrdt'
            from components.java

            pom {
                name = 'Y-CRDT JNI'
                description = 'Java bindings for the y-crdt (yrs) Rust library'
                url = 'https://github.com/edpaget/y-crdt-jni'

                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'edpaget'
                        name = 'Edward Paget'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/edpaget/y-crdt-jni.git'
                    developerConnection = 'scm:git:ssh://github.com/edpaget/y-crdt-jni.git'
                    url = 'https://github.com/edpaget/y-crdt-jni'
                }
            }
        }
    }
}

// JMH Benchmark configuration
jmh {
    jmhVersion = '1.37'

    // Output configuration
    resultFormat = 'JSON'
    resultsFile = file("${buildDir}/reports/jmh/results.json")

    // Benchmark execution parameters
    warmupIterations = 3
    iterations = 5
    fork = 2
    threads = 1
    timeOnIteration = '1s'

    // Enable GC profiler by default to measure memory usage
    profilers = ['gc']

    // JVM arguments
    jvmArgs = ['-Xmx2g', '-Xms2g']

    // Include/exclude patterns (can be overridden via command line)
    // includes = ['.*Benchmark.*']

    // Duplicate class strategy
    duplicateClassesStrategy = DuplicatesStrategy.WARN
}

// Ensure JMH benchmarks are not included in production JAR
jar {
    // Exclude JMH metadata from production JAR
    exclude 'META-INF/BenchmarkList'
    exclude 'META-INF/CompilerHints'
}
