name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # Y-CRDT JNI ${{ steps.get_version.outputs.version }}

            Java bindings for y-crdt (yrs) - High-performance CRDTs for the JVM

            ## Features
            - YDoc: Core document type with synchronization support
            - Multi-platform support (Linux, macOS, Windows)
            - Memory-safe JNI bindings

            ## Installation
            Download the JAR file and add it to your classpath. Native libraries for all platforms are included.

            ## Changes
            See [CHANGELOG.md](CHANGELOG.md) for details.

  build-and-upload:
    name: Build and Upload (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            lib_name: libycrdt_jni.so
            asset_name: libycrdt_jni-linux-x86_64.so

          # macOS builds
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            lib_name: libycrdt_jni.dylib
            asset_name: libycrdt_jni-macos-x86_64.dylib

          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            lib_name: libycrdt_jni.dylib
            asset_name: libycrdt_jni-macos-aarch64.dylib

          # Windows builds
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            lib_name: ycrdt_jni.dll
            asset_name: ycrdt_jni-windows-x86_64.dll

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release library
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.lib_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  build-release-jar:
    name: Build and Upload Release JAR
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Add Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-pc-windows-msvc

      - name: Build native libraries for all platforms
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cargo build --release --target x86_64-pc-windows-msvc
          # Note: Cross-compilation for macOS requires special setup
          # For now, we'll skip macOS builds on Linux

      - name: Organize native libraries
        run: |
          mkdir -p src/main/resources/native/linux/x86_64
          mkdir -p src/main/resources/native/windows/x86_64

          cp target/x86_64-unknown-linux-gnu/release/libycrdt_jni.so src/main/resources/native/linux/x86_64/
          cp target/x86_64-pc-windows-msvc/release/ycrdt_jni.dll src/main/resources/native/windows/x86_64/

      - name: Build JAR
        run: ./gradlew jar -Pversion=${{ needs.create-release.outputs.version }}

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: build/libs/y-crdt-jni-${{ needs.create-release.outputs.version }}.jar
          asset_name: y-crdt-jni-${{ needs.create-release.outputs.version }}.jar
          asset_content_type: application/java-archive
